{"version":3,"sources":["Components/Order/OrderSummary/CheckoutSummary.js","Containers/ContactData/ContactData.js","Containers/Checkout/Checkout.js","Components/UI/input/input.js","Components/UI/input/input.module.css","Components/Order/OrderSummary/CheckoutSummary.module.css","Containers/ContactData/ContactData.module.css"],"names":["CheckoutSummary","props","className","classes","style","width","height","margin","Burger","ingredients","Button","btnType","clicked","checkoutcancel","checkoutcontinue","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","orderData","ings","price","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","order","burgerBuilder","totalPrice","auth","dispatch","actions","Checkout","CheckoutCancelHandler","history","goBack","CheckoutContinueHandler","replace","match","path","summary","to","purchasedRedirect","purchased","component","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Input","Label","label","module","exports"],"mappings":"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","file":"static/js/3.0c3e0317.chunk.js","sourcesContent":["import React from 'react'\r\nimport Burger from '../../Burger/Burger'\r\nimport Button from '../../UI/Button/Button'\r\nimport classes from './CheckoutSummary.module.css'\r\n\r\nfunction CheckoutSummary(props) {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We hope it taste well!</h1>\r\n            <div style={{width:'100%', height:'300px', margin:'auto'}}>\r\n                <Burger ingredients ={props.ingredients}/>\r\n            </div>\r\n            <Button \r\n                btnType=\"Danger\"\r\n                clicked={props.checkoutcancel}>CANCEL</Button>\r\n            <Button \r\n                btnType=\"Success\"\r\n                clicked={props.checkoutcontinue}>CONTINUE</Button>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CheckoutSummary\r\n","import React, { Component } from 'react';\r\nimport classes from './ContactData.module.css';\r\nimport { connect } from 'react-redux'\r\nimport Button from '../../Components/UI/Button/Button'\r\nimport Spinner from '../../Components/UI/Spinner/Spinner'\r\nimport Input from '../../Components/UI/input/input'\r\nimport * as actions from '../../store/actions/index'\r\nimport { updateObject , checkValidity} from '../../shared/utilitiy';\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                    },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'ZIP Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6,\r\n                    maxLength: 6,\r\n                    isNumeric: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your E-Mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'fastest', displayValue: 'Fastest'},\r\n                        {value: 'cheapest', displayValue: 'Cheapest'}\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                validation: {},\r\n                valid: true\r\n            }\r\n        },\r\n        formIsValid: false\r\n    }\r\n\r\n    orderHandler = ( event ) => {\r\n        event.preventDefault();\r\n        const formData ={};\r\n        for (let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n        const orderData = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId:this.props.userId\r\n        }\r\n        this.props.onOrderBurger(orderData,this.props.token);\r\n        \r\n    }\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        \r\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier],\r\n            {\r\n                value : event.target.value,\r\n                valid : checkValidity(event.target.value,this.state.orderForm[inputIdentifier].validation),\r\n                touched: true\r\n            });\r\n        const updatedOrderForm = updateObject(this.state.orderForm,{ [inputIdentifier] :updatedFormElement});\r\n        let formIsValid = true;\r\n        for (let inputIdentifier in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\r\n    }\r\n    render () {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n                {formElementsArray.map(formElement => (\r\n                    <Input \r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n                ))}\r\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\r\n            </form>\r\n        );\r\n        if ( this.props.loading ) {\r\n            form = <Spinner />;\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        loading:state.order.loading,\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        token:state.auth.token,\r\n        userId:state.auth.userId\r\n}};\r\nconst mapDispatchToProps = dispatch =>{\r\n    return{\r\n        onOrderBurger:(orderData,token)=> dispatch(actions.purchaseBurger(orderData,token))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ContactData);","import React, { Component } from 'react'\r\nimport CheckoutSummary from '../../Components/Order/OrderSummary/CheckoutSummary'\r\nimport { connect } from 'react-redux'\r\nimport ContactData from '../ContactData/ContactData';\r\nimport { Route ,Redirect} from 'react-router';\r\n\r\nexport class Checkout extends Component {\r\n\r\n    CheckoutCancelHandler=()=>{\r\n        this.props.history.goBack();\r\n    }\r\n    CheckoutContinueHandler=()=>{\r\n        this.props.history.replace(this.props.match.path + '/contact-data')\r\n    }\r\n    render() {\r\n        let summary = <Redirect to=\"/\"/>\r\n        if(this.props.ings){\r\n            const purchasedRedirect= this.props.purchased?<Redirect to=\"/\"/>:null;\r\n            summary=(\r\n                    <div>\r\n                        {purchasedRedirect}\r\n                        <CheckoutSummary \r\n                        ingredients={this.props.ings} \r\n                        checkoutcancel={this.CheckoutCancelHandler}\r\n                        checkoutcontinue={this.CheckoutContinueHandler}/>\r\n                        <Route\r\n                            path={this.props.match.path + '/contact-data'}\r\n                            component={ContactData}/>\r\n                    </div>\r\n            )\r\n        }\r\n        return summary;\r\n    }\r\n}\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased:state.order.purchased\r\n}};\r\n\r\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\r\n\r\nimport classes from './input.module.css';\r\n\r\nconst input = ( props ) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n    switch ( props.elementType ) {\r\n        case ( 'input' ):\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ( 'textarea' ):\r\n            inputElement = <textarea\r\n            className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n            break;\r\n        case ( 'select' ):\r\n            inputElement = (\r\n                <select\r\n                className={inputClasses.join(' ')}\r\n                    value={props.value}\r\n                    onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input\r\n            className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"input_Input__3qy65\",\"Label\":\"input_Label__31iAt\",\"InputElement\":\"input_InputElement__38otg\",\"Invalid\":\"input_Invalid__2TKu4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__1J6zM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__-62kd\",\"Input\":\"ContactData_Input__30VPo\"};"],"sourceRoot":""}