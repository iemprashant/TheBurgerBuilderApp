{"version":3,"sources":["Components/UI/input/input.js","Components/UI/input/input.module.css","Components/Order/OrderSummary/CheckoutSummary.module.css","Containers/ContactData/ContactData.module.css","Components/Order/OrderSummary/CheckoutSummary.js","Containers/ContactData/ContactData.js","Containers/Checkout/Checkout.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","CheckoutSummary","style","width","height","margin","Burger","ingredients","Button","btnType","clicked","checkoutcancel","checkoutcontinue","connect","state","loading","order","ings","burgerBuilder","price","totalPrice","token","auth","userId","dispatch","onOrderBurger","orderData","actions","useState","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","orderForm","setOrderForm","formIsValid","setFormIsValid","formElementsArray","id","config","form","onSubmit","event","preventDefault","formData","formElementIdentifier","formElement","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","inputChangedHandler","disabled","Spinner","ContactData","purchased","summary","to","purchasedRedirect","history","goBack","replace","match","path","component"],"mappings":"2HAAA,qCAwDeA,IApDD,SAAEC,GACZ,IAAIC,EAAe,KACbC,EAAe,CAACC,IAAQC,cAI9B,OAHIJ,EAAMK,SAAWL,EAAMM,gBAAkBN,EAAMO,SAC/CL,EAAaM,KAAKL,IAAQM,SAErBT,EAAMU,aACX,IAAO,QACHT,EAAe,yCACXU,UAAWT,EAAaU,KAAK,MACzBZ,EAAMa,cAFC,CAGXC,MAAOd,EAAMc,MACbC,SAAUf,EAAMgB,WACpB,MACJ,IAAO,WACHf,EAAe,4CACfU,UAAWT,EAAaU,KAAK,MACrBZ,EAAMa,cAFC,CAGXC,MAAOd,EAAMc,MACbC,SAAUf,EAAMgB,WACpB,MACJ,IAAO,SACHf,EACI,4BACAU,UAAWT,EAAaU,KAAK,KACzBE,MAAOd,EAAMc,MACbC,SAAUf,EAAMgB,SACfhB,EAAMa,cAAcI,QAAQC,KAAI,SAAAC,GAAM,OACnC,4BAAQC,IAAKD,EAAOL,MAAOA,MAAOK,EAAOL,OACpCK,EAAOE,kBAKxB,MACJ,QACIpB,EAAe,yCACfU,UAAWT,EAAaU,KAAK,MACrBZ,EAAMa,cAFC,CAGXC,MAAOd,EAAMc,MACbC,SAAUf,EAAMgB,WAG5B,OACI,yBAAKL,UAAWR,IAAQmB,OACpB,2BAAOX,UAAWR,IAAQoB,OAAQvB,EAAMwB,OACvCvB,K,mBCjDbwB,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,aAAe,4BAA4B,QAAU,yB,mBCAjID,EAAOC,QAAU,CAAC,gBAAkB,2C,mBCApCD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,MAAQ,6B,4FCsB1DC,MAlBf,SAAyB3B,GACrB,OACI,yBAAKW,UAAWR,IAAQwB,iBACpB,sDACA,yBAAKC,MAAO,CAACC,MAAM,OAAQC,OAAO,QAASC,OAAO,SAC9C,kBAACC,EAAA,EAAD,CAAQC,YAAcjC,EAAMiC,eAEhC,kBAACC,EAAA,EAAD,CACIC,QAAQ,SACRC,QAASpC,EAAMqC,gBAFnB,UAGA,kBAACH,EAAA,EAAD,CACIC,QAAQ,UACRC,QAASpC,EAAMsC,kBAFnB,c,wECgKGC,eAdS,SAAAC,GACpB,MAAO,CACHC,QAAQD,EAAME,MAAMD,QACpBE,KAAMH,EAAMI,cAAcX,YAC1BY,MAAOL,EAAMI,cAAcE,WAC3BC,MAAMP,EAAMQ,KAAKD,MACjBE,OAAOT,EAAMQ,KAAKC,WAEC,SAAAC,GACvB,MAAM,CACFC,cAAc,SAACC,EAAUL,GAAX,OAAoBG,EAASG,IAAuBD,EAAUL,QAIrER,EAtKG,SAACvC,GAAS,IAAD,EACUsD,mBAAS,CAACC,KAAM,CACzC7C,YAAa,QACbG,cAAe,CACX2C,KAAM,OACNC,YAAa,aAEjB3C,MAAO,GACP4C,WAAY,CACRC,UAAU,GAEdC,OAAO,EACPrD,SAAS,GAEbsD,OAAQ,CACJnD,YAAa,QACbG,cAAe,CACX2C,KAAM,OACNC,YAAa,UAEjB3C,MAAO,GACP4C,WAAY,CACRC,UAAU,GAEdC,OAAO,EACPrD,SAAS,GAEbuD,QAAS,CACLpD,YAAa,QACbG,cAAe,CACX2C,KAAM,OACNC,YAAa,YAEjB3C,MAAO,GACP4C,WAAY,CACRC,UAAU,EACVI,UAAW,EACXC,UAAW,EACXC,WAAW,GAEfL,OAAO,EACPrD,SAAS,GAEb2D,QAAS,CACLxD,YAAa,QACbG,cAAe,CACX2C,KAAM,OACNC,YAAa,WAEjB3C,MAAO,GACP4C,WAAY,CACRC,UAAU,GAEdC,OAAO,EACPrD,SAAS,GAEb4D,MAAO,CACHzD,YAAa,QACbG,cAAe,CACX2C,KAAM,QACNC,YAAa,eAEjB3C,MAAO,GACP4C,WAAY,CACRC,UAAU,EACVS,SAAS,GAEbR,OAAO,EACPrD,SAAS,GAEb8D,eAAgB,CACZ3D,YAAa,SACbG,cAAe,CACXI,QAAS,CACL,CAACH,MAAO,UAAWO,aAAc,WACjC,CAACP,MAAO,WAAYO,aAAc,cAG1CP,MAAO,UACP4C,WAAY,GACZE,OAAO,KAhFQ,mBAChBU,EADgB,KACNC,EADM,OAmFYjB,oBAAS,GAnFrB,mBAmFhBkB,EAnFgB,KAmFJC,EAnFI,KAoHjBC,EAAoB,GAC1B,IAAK,IAAItD,KAAOkD,EACZI,EAAkBlE,KAAK,CACnBmE,GAAIvD,EACJwD,OAAON,EAAUlD,KAIzB,IAAIyD,EACA,0BAAMC,SAxCW,SAAEC,GACnBA,EAAMC,iBACN,IAAMC,EAAU,GAChB,IAAK,IAAIC,KAAyBZ,EAC9BW,EAASC,GAAyBZ,EAAUY,GAAuBpE,MAEvE,IAAMsC,EAAY,CACdnB,YAAajC,EAAM2C,KACnBE,MAAM7C,EAAM6C,MACZO,UAAW6B,EACXhC,OAAOjD,EAAMiD,QAEjBjD,EAAMmD,cAAcC,EAAUpD,EAAM+C,SA6B/B2B,EAAkBxD,KAAI,SAAAiE,GAAW,OAC9B,kBAAC,IAAD,CACI/D,IAAK+D,EAAYR,GACjBjE,YAAayE,EAAYP,OAAOlE,YAChCG,cAAesE,EAAYP,OAAO/D,cAClCC,MAAOqE,EAAYP,OAAO9D,MAC1BT,SAAU8E,EAAYP,OAAOhB,MAC7BtD,eAAgB6E,EAAYP,OAAOlB,WACnCnD,QAAS4E,EAAYP,OAAOrE,QAC5BS,QAAS,SAAC+D,GAAD,OApCG,SAACA,EAAOK,GAEhC,IAAMC,EAAqBC,YAAahB,EAAUc,GAC9C,CACItE,MAAQiE,EAAMQ,OAAOzE,MACrB8C,MAAQ4B,YAAcT,EAAMQ,OAAOzE,MAAMwD,EAAUc,GAAiB1B,YACpEnD,SAAS,IAEXkF,EAAmBH,YAAahB,EAAD,eAAcc,EAAkBC,IACjEb,GAAc,EAClB,IAAK,IAAIY,KAAmBK,EACxBjB,EAAciB,EAAiBL,GAAiBxB,OAASY,EAE7DD,EAAakB,GACbhB,EAAeD,GAsBiBkB,CAAoBX,EAAOI,EAAYR,UAEnE,kBAACzC,EAAA,EAAD,CAAQC,QAAQ,UAAUwD,UAAWnB,GAArC,UAOJ,OAHCxE,EAAMyC,UACPoC,EAAO,kBAACe,EAAA,EAAD,OAGH,yBAAKjF,UAAWR,IAAQ0F,aACpB,uDACChB,M,OCtHFtC,uBANS,SAAAC,GACpB,MAAO,CACHG,KAAMH,EAAMI,cAAcX,YAC1B6D,UAAUtD,EAAME,MAAMoD,aAGfvD,EAhCA,SAAAvC,GAEX,IAMQ+F,EAAU,kBAAC,IAAD,CAAUC,GAAG,MAC3B,GAAGhG,EAAM2C,KAAK,CACV,IAAMsD,EAAmBjG,EAAM8F,UAAU,kBAAC,IAAD,CAAUE,GAAG,MAAM,KAC5DD,EACQ,6BACKE,EACD,kBAAC,EAAD,CACAhE,YAAajC,EAAM2C,KACnBN,eAdQ,WACxBrC,EAAMkG,QAAQC,UAcE7D,iBAZU,WAC1BtC,EAAMkG,QAAQE,QAAQpG,EAAMqG,MAAMC,KAAO,oBAYzB,kBAAC,IAAD,CACIA,KAAMtG,EAAMqG,MAAMC,KAAO,gBACzBC,UAAWV,KAI/B,OAAOE","file":"static/js/3.4574ba4b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport classes from './input.module.css';\r\n\r\nconst input = ( props ) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n    switch ( props.elementType ) {\r\n        case ( 'input' ):\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ( 'textarea' ):\r\n            inputElement = <textarea\r\n            className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n            break;\r\n        case ( 'select' ):\r\n            inputElement = (\r\n                <select\r\n                className={inputClasses.join(' ')}\r\n                    value={props.value}\r\n                    onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input\r\n            className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"input_Input__3qy65\",\"Label\":\"input_Label__31iAt\",\"InputElement\":\"input_InputElement__38otg\",\"Invalid\":\"input_Invalid__2TKu4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__1J6zM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__-62kd\",\"Input\":\"ContactData_Input__30VPo\"};","import React from 'react'\r\nimport Burger from '../../Burger/Burger'\r\nimport Button from '../../UI/Button/Button'\r\nimport classes from './CheckoutSummary.module.css'\r\n\r\nfunction CheckoutSummary(props) {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We hope it taste well!</h1>\r\n            <div style={{width:'100%', height:'300px', margin:'auto'}}>\r\n                <Burger ingredients ={props.ingredients}/>\r\n            </div>\r\n            <Button \r\n                btnType=\"Danger\"\r\n                clicked={props.checkoutcancel}>CANCEL</Button>\r\n            <Button \r\n                btnType=\"Success\"\r\n                clicked={props.checkoutcontinue}>CONTINUE</Button>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CheckoutSummary\r\n","import React, { useState } from 'react';\r\nimport classes from './ContactData.module.css';\r\nimport { connect } from 'react-redux'\r\nimport Button from '../../Components/UI/Button/Button'\r\nimport Spinner from '../../Components/UI/Spinner/Spinner'\r\nimport Input from '../../Components/UI/input/input'\r\nimport * as actions from '../../store/actions/index'\r\nimport { updateObject , checkValidity} from '../../shared/utilitiy';\r\n\r\nconst ContactData=(props)=>{\r\n    const [orderForm,setOrderForm] = useState({name: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: 'Your Name'\r\n                },\r\n            value: '',\r\n            validation: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        street: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: 'Street'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        zipCode: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: 'ZIP Code'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                minLength: 6,\r\n                maxLength: 6,\r\n                isNumeric: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        country: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: 'Country'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        email: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'email',\r\n                placeholder: 'Your E-Mail'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                isEmail: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        deliveryMethod: {\r\n            elementType: 'select',\r\n            elementConfig: {\r\n                options: [\r\n                    {value: 'fastest', displayValue: 'Fastest'},\r\n                    {value: 'cheapest', displayValue: 'Cheapest'}\r\n                ]\r\n            },\r\n            value: 'fastest',\r\n            validation: {},\r\n            valid: true\r\n        }\r\n    })\r\n    const [formIsValid,setFormIsValid]=useState(false)\r\n\r\n    const orderHandler = ( event ) => {\r\n        event.preventDefault();\r\n        const formData ={};\r\n        for (let formElementIdentifier in orderForm) {\r\n            formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\r\n        }\r\n        const orderData = {\r\n            ingredients: props.ings,\r\n            price:props.price,\r\n            orderData: formData,\r\n            userId:props.userId\r\n        }\r\n        props.onOrderBurger(orderData,props.token); \r\n    }\r\n    const inputChangedHandler = (event, inputIdentifier) => {\r\n        \r\n        const updatedFormElement = updateObject(orderForm[inputIdentifier],\r\n            {\r\n                value : event.target.value,\r\n                valid : checkValidity(event.target.value,orderForm[inputIdentifier].validation),\r\n                touched: true\r\n            });\r\n        const updatedOrderForm = updateObject(orderForm,{ [inputIdentifier] :updatedFormElement});\r\n        let formIsValid = true;\r\n        for (let inputIdentifier in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n        setOrderForm(updatedOrderForm);\r\n        setFormIsValid(formIsValid)\r\n    }\r\n\r\n    const formElementsArray = [];\r\n    for (let key in orderForm) {\r\n        formElementsArray.push({\r\n            id: key,\r\n            config:orderForm[key]\r\n        });\r\n    }\r\n\r\n    let form = (\r\n        <form onSubmit={orderHandler}>\r\n            {formElementsArray.map(formElement => (\r\n                <Input \r\n                    key={formElement.id}\r\n                    elementType={formElement.config.elementType}\r\n                    elementConfig={formElement.config.elementConfig}\r\n                    value={formElement.config.value}\r\n                    invalid={!formElement.config.valid}\r\n                    shouldValidate={formElement.config.validation}\r\n                    touched={formElement.config.touched}\r\n                    changed={(event) => inputChangedHandler(event, formElement.id)} />\r\n            ))}\r\n            <Button btnType=\"Success\" disabled={!formIsValid}>ORDER</Button>\r\n        </form>\r\n    );\r\n\r\n    if ( props.loading ) {\r\n        form = <Spinner />;\r\n    }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n\r\n}\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        loading:state.order.loading,\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        token:state.auth.token,\r\n        userId:state.auth.userId\r\n}};\r\nconst mapDispatchToProps = dispatch =>{\r\n    return{\r\n        onOrderBurger:(orderData,token)=> dispatch(actions.purchaseBurger(orderData,token))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ContactData);","import React from 'react'\r\nimport CheckoutSummary from '../../Components/Order/OrderSummary/CheckoutSummary'\r\nimport { connect } from 'react-redux'\r\nimport ContactData from '../ContactData/ContactData';\r\nimport { Route ,Redirect} from 'react-router';\r\n\r\nconst Checkout=props=>{\r\n\r\n    const CheckoutCancelHandler=()=>{\r\n        props.history.goBack();\r\n    }\r\n    const CheckoutContinueHandler=()=>{\r\n        props.history.replace(props.match.path + '/contact-data')\r\n    }\r\n        let summary = <Redirect to=\"/\"/>\r\n        if(props.ings){\r\n            const purchasedRedirect= props.purchased?<Redirect to=\"/\"/>:null;\r\n            summary=(\r\n                    <div>\r\n                        {purchasedRedirect}\r\n                        <CheckoutSummary \r\n                        ingredients={props.ings} \r\n                        checkoutcancel={CheckoutCancelHandler}\r\n                        checkoutcontinue={CheckoutContinueHandler}/>\r\n                        <Route\r\n                            path={props.match.path + '/contact-data'}\r\n                            component={ContactData}/>\r\n                    </div>\r\n            )\r\n        }\r\n        return summary;\r\n    }\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased:state.order.purchased\r\n}};\r\n\r\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}