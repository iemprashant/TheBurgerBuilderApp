{"version":3,"sources":["Containers/Auth/auth.js","Components/UI/input/input.js","Components/UI/input/input.module.css","Containers/Auth/auth.module.css"],"names":["auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","authRedirect","isAuthenticated","to","errorMessage","error","message","className","classes","Auth","onSubmit","btnType","clicked","Component","connect","token","burgerBuilder","building","dispatch","actions","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue","Input","Label","label","module","exports"],"mappings":"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","file":"static/js/4.bf2292b6.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Button from '../../Components/UI/Button/Button'\r\nimport Input from '../../Components/UI/input/input'\r\nimport Spinner from '../../Components/UI/Spinner/Spinner'\r\nimport classes from './auth.module.css'\r\nimport * as actions from '../../store/actions/index'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router'\r\nimport { updateObject , checkValidity } from '../../shared/utilitiy'\r\n\r\nclass auth extends Component {\r\n    state={\r\n        controls:{\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength:6\r\n                    \r\n                },\r\n                valid: false,\r\n                touched: false\r\n            } \r\n        },\r\n        isSignup:false\r\n    }\r\n    componentDidMount(){\r\n        if(!this.props.buildingBurger && this.props.authRedirectPath!=='/'){\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    inputChangedHandler=(event,controlName)=>{\r\n        const updatedControls=updateObject(this.state.controls,{\r\n            [controlName]: updateObject(this.state.controls[controlName],{\r\n                value: event.target.value,\r\n                valid:checkValidity(event.target.value,this.state.controls[controlName].validation),\r\n                touched:true\r\n            })\r\n        });\r\n        this.setState({controls:updatedControls});\r\n    };\r\n    submitHandler=(event)=>{\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value,this.state.isSignup)\r\n    };\r\n    switchAuthModeHandler=()=>{\r\n        this.setState(prevState=>{\r\n            return {isSignup:!prevState.isSignup}\r\n        })\r\n    }\r\n    render() {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.controls) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n        let form = formElementsArray.map(formElement =>(\r\n            <Input\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}\r\n            changed={(event) => this.inputChangedHandler(event, formElement.id)} /> \r\n        )\r\n        );\r\n        if(this.props.loading){\r\n            form = <Spinner/>\r\n        }\r\n        let authRedirect=null;\r\n        if(this.props.isAuthenticated){\r\n            authRedirect= <Redirect to ={this.props.authRedirectPath}/>\r\n        }\r\n        let errorMessage =null;\r\n        \r\n        if(this.props.error){\r\n            errorMessage=(\r\n                <p>{this.props.error.message}</p>\r\n            );\r\n        };\r\n        \r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">{this.state.isSignup? 'SIGNUP' : 'SIGNIN'}</Button>\r\n                </form>\r\n                <Button \r\n                    clicked={this.switchAuthModeHandler}\r\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignup? 'SIGNIN' : 'SIGNUP'}</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps= state=>{\r\n    return {\r\n        loading:state.auth.loading,\r\n        error:state.auth.error,\r\n        isAuthenticated :state.auth.token!==null,\r\n        buildingBurger:state.burgerBuilder.building,\r\n        authRedirectPath:state.auth.authRedirectPath\r\n    }\r\n};\r\nconst mapDispatchToProps= dispatch =>{\r\n    return{\r\n        onAuth:(email,password,isSignup)=>dispatch(actions.auth(email,password,isSignup)),\r\n        onSetAuthRedirectPath:()=>dispatch(actions.setAuthRedirectPath('/'))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(auth);\r\n","import React from 'react';\r\n\r\nimport classes from './input.module.css';\r\n\r\nconst input = ( props ) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n    switch ( props.elementType ) {\r\n        case ( 'input' ):\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ( 'textarea' ):\r\n            inputElement = <textarea\r\n            className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n            break;\r\n        case ( 'select' ):\r\n            inputElement = (\r\n                <select\r\n                className={inputClasses.join(' ')}\r\n                    value={props.value}\r\n                    onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input\r\n            className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"input_Input__3qy65\",\"Label\":\"input_Label__31iAt\",\"InputElement\":\"input_InputElement__38otg\",\"Invalid\":\"input_Invalid__2TKu4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"auth_Auth__3AaAI\",\"Input\":\"auth_Input__2gRZa\"};"],"sourceRoot":""}