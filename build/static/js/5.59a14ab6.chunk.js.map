{"version":3,"sources":["Components/Order/Order.js","hoc/withErrorHandler/withErrorHandler.js","Containers/Orders/Orders.js","Components/Order/Order.module.css"],"names":["order","props","ingredients","ingredientName","push","name","amount","ingredientOutput","map","ig","style","textTransform","display","margin","border","padding","key","className","classes","Order","Number","parseFloat","price","toFixed","withErrorHandler","WrappedComponent","axios","state","error","errorConfirmedHandler","setState","this","reqInterceptor","interceptors","request","use","req","resInterceptor","response","res","eject","Modal","show","modalClosed","message","Component","Orders","componentDidMount","onFetchOrders","token","userId","orders","Spinner","loading","id","connect","auth","dispatch","actions","module","exports"],"mappings":"2OAoCeA,EAhCD,SAAEC,GACZ,IAAMC,EAAc,GAEpB,IAAM,IAAIC,KAAkBF,EAAMC,YAC9BA,EAAYE,KACR,CACIC,KAAMF,EACNG,OAAQL,EAAMC,YAAYC,KAKtC,IAAMI,EAAmBL,EAAYM,KAAI,SAAAC,GACrC,OAAO,0BACHC,MAAO,CACHC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAS,OAEbC,IAAKP,EAAGJ,MAAOI,EAAGJ,KARf,KAQuBI,EAAGH,OAR1B,QAWX,OACI,yBAAKW,UAAWC,IAAQC,OACpB,2CAAiBZ,GACjB,qCAAU,uCAAaa,OAAOC,WAAYpB,EAAMqB,OAAQC,QAAS,O,gCCY9DC,EAxCU,SAAEC,EAAkBC,GACzC,mNACIC,MAAQ,CACJC,MAAO,MAFf,EAoBIC,sBAAwB,WACpB,EAAKC,SAAU,CAAEF,MAAO,QArBhC,mEAK2B,IAAD,OAClBG,KAAKC,eAAiBN,EAAMO,aAAaC,QAAQC,KAAK,SAAAC,GAElD,OADA,EAAKN,SAAU,CAAEF,MAAO,OACjBQ,KAEXL,KAAKM,eAAiBX,EAAMO,aAAaK,SAASH,KAAK,SAAAI,GAAG,OAAIA,KAAK,SAAAX,GAC/D,EAAKE,SAAU,CAAEF,MAAOA,SAXpC,6CAgBQF,EAAMO,aAAaC,QAAQM,MAAOT,KAAKC,gBACvCN,EAAMO,aAAaK,SAASE,MAAOT,KAAKM,kBAjBhD,+BAyBQ,OACI,kBAAC,WAAD,KACI,kBAACI,EAAA,EAAD,CACIC,KAAMX,KAAKJ,MAAMC,MACjBe,YAAaZ,KAAKF,uBACjBE,KAAKJ,MAAMC,MAAQG,KAAKJ,MAAMC,MAAMgB,QAAU,MAEnD,kBAACnB,EAAqBM,KAAK9B,YAhC3C,GAAqB4C,c,QCIZC,EAAb,4MACIC,kBAAkB,WACf,EAAK9C,MAAM+C,cAAc,EAAK/C,MAAMgD,MAAM,EAAKhD,MAAMiD,SAF5D,uDAKQ,IAAIC,EAAO,kBAACC,EAAA,EAAD,MASX,OARKrB,KAAK9B,MAAMoD,UACZF,EAAOpB,KAAK9B,MAAMkD,OAAO3C,KAAI,SAAAR,GAAK,OAClB,kBAACmB,EAAD,CACAH,IAAKhB,EAAMsD,GACXpD,YAAaF,EAAME,YACnBoB,MAAOtB,EAAMsB,YAG1B6B,MAdf,GAA4BN,aA8BbU,uBAbS,SAAA5B,GACpB,MAAO,CACHwB,OAAOxB,EAAM3B,MAAMmD,OACnBE,QAAQ1B,EAAM3B,MAAMqD,QACpBJ,MAAMtB,EAAM6B,KAAKP,MACjBC,OAAOvB,EAAM6B,KAAKN,WAEC,SAAAO,GACvB,MAAM,CACFT,cAAc,SAACC,EAAMC,GAAP,OAAgBO,EAASC,IAAmBT,EAAMC,QAIzDK,CAA6C/B,EAAkBsB,EAAQpB,O,mBCrCtFiC,EAAOC,QAAU,CAAC,MAAQ","file":"static/js/5.59a14ab6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport classes from './Order.module.css';\r\n\r\nconst order = ( props ) => {\r\n    const ingredients = [];\r\n\r\n    for ( let ingredientName in props.ingredients ) {\r\n        ingredients.push(\r\n            {\r\n                name: ingredientName,\r\n                amount: props.ingredients[ingredientName]\r\n            }\r\n        );\r\n    }\r\n\r\n    const ingredientOutput = ingredients.map(ig => {\r\n        return <span \r\n            style={{\r\n                textTransform: 'capitalize',\r\n                display: 'inline-block',\r\n                margin: '0 8px',\r\n                border: '1px solid #ccc',\r\n                padding: '5px'\r\n                }}\r\n            key={ig.name}>{ig.name} ({ig.amount})</span>;\r\n    });\r\n\r\n    return (\r\n        <div className={classes.Order}>\r\n            <p>Ingredients: {ingredientOutput}</p>\r\n            <p>Price: <strong>USD {Number.parseFloat( props.price ).toFixed( 2 )}</strong></p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default order;","import React, { Component, Fragment } from 'react';\nimport Modal from '../../Components/UI/Modal/Modal'\n\nconst withErrorHandler = ( WrappedComponent, axios ) => {\n    return class extends Component {\n        state = {\n            error: null\n        }\n\n        componentWillMount () {\n            this.reqInterceptor = axios.interceptors.request.use( req => {\n                this.setState( { error: null } );\n                return req;\n            } );\n            this.resInterceptor = axios.interceptors.response.use( res => res, error => {\n                this.setState( { error: error } );\n            } );\n        }\n\n        componentWillUnmount () {\n            axios.interceptors.request.eject( this.reqInterceptor );\n            axios.interceptors.response.eject( this.resInterceptor );\n        }\n\n        errorConfirmedHandler = () => {\n            this.setState( { error: null } );\n        }\n\n        render () {\n            return (\n                <Fragment>\n                    <Modal\n                        show={this.state.error}\n                        modalClosed={this.errorConfirmedHandler}>\n                        {this.state.error ? this.state.error.message : null}\n                    </Modal>\n                    <WrappedComponent {...this.props} />\n                </Fragment>\n            );\n        }\n    }\n}\n\nexport default withErrorHandler;","import React, { Component } from 'react'\r\nimport Order from '../../Components/Order/Order'\r\nimport * as actions from '../../store/actions/index'\r\nimport { connect } from 'react-redux'\r\nimport Spinner from '../../Components/UI/Spinner/Spinner'\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport axios from '../../axios-orders'\r\n\r\nexport class Orders extends Component {\r\n    componentDidMount=()=>{\r\n       this.props.onFetchOrders(this.props.token,this.props.userId);\r\n    }\r\n    render() {\r\n        let orders=<Spinner/>;\r\n        if( !this.props.loading){\r\n            orders=this.props.orders.map(order=>(\r\n                            <Order \r\n                            key={order.id}\r\n                            ingredients={order.ingredients}\r\n                            price={order.price}/>\r\n                        ))\r\n            }\r\n        return orders;\r\n    }\r\n}\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        orders:state.order.orders,\r\n        loading:state.order.loading,\r\n        token:state.auth.token,\r\n        userId:state.auth.userId\r\n}};\r\nconst mapDispatchToProps = dispatch =>{\r\n    return{\r\n        onFetchOrders:(token,userId)=>dispatch(actions.fetchOrder(token,userId))\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)( withErrorHandler( Orders, axios ) );\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__1HmuK\"};"],"sourceRoot":""}