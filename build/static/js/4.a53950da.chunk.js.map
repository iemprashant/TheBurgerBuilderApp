{"version":3,"sources":["Components/UI/input/input.js","Components/UI/input/input.module.css","Containers/Auth/auth.module.css","Containers/Auth/auth.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","connect","state","loading","auth","error","isAuthenticated","token","buildingBurger","burgerBuilder","building","authRedirectPath","dispatch","onAuth","email","password","isSignup","actions","onSetAuthRedirectPath","useState","type","placeholder","validation","required","isEmail","valid","minLength","authForm","setAuthForm","setIsSignup","useEffect","formElementsArray","id","config","form","formElement","event","controlName","updatedControls","updateObject","target","checkValidity","inputChangedHandler","errorMessage","message","authRedirect","to","Auth","onSubmit","preventDefault","btnType","clicked"],"mappings":"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","file":"static/js/4.a53950da.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport classes from './input.module.css';\r\n\r\nconst input = ( props ) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n    switch ( props.elementType ) {\r\n        case ( 'input' ):\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ( 'textarea' ):\r\n            inputElement = <textarea\r\n            className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n            break;\r\n        case ( 'select' ):\r\n            inputElement = (\r\n                <select\r\n                className={inputClasses.join(' ')}\r\n                    value={props.value}\r\n                    onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input\r\n            className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"input_Input__3qy65\",\"Label\":\"input_Label__31iAt\",\"InputElement\":\"input_InputElement__38otg\",\"Invalid\":\"input_Invalid__2TKu4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"auth_Auth__3AaAI\",\"Input\":\"auth_Input__2gRZa\"};","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Input from '../../Components/UI/input/input';\r\nimport Button from '../../Components/UI/Button/Button';\r\nimport Spinner from '../../Components/UI/Spinner/Spinner';\r\nimport classes from './auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../shared/utilitiy';\r\n\r\nconst Auth = props => {\r\n  const [authForm, setAuthForm] = useState({\r\n    email: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'email',\r\n        placeholder: 'Mail Address'\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n        isEmail: true\r\n      },\r\n      valid: false,\r\n      touched: false\r\n    },\r\n    password: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'password',\r\n        placeholder: 'Password'\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n        minLength: 6\r\n      },\r\n      valid: false,\r\n      touched: false\r\n    }\r\n  });\r\n  const [isSignup, setIsSignup] = useState(true);\r\n  const {buildingBurger,authRedirectPath,onSetAuthRedirectPath}=props;\r\n\r\n  useEffect(() => {\r\n    if (!buildingBurger && authRedirectPath !== '/') {\r\n      onSetAuthRedirectPath();\r\n    }\r\n  }, [buildingBurger,authRedirectPath,onSetAuthRedirectPath]);\r\n\r\n  const inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = updateObject(authForm, {\r\n      [controlName]: updateObject(authForm[controlName], {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          authForm[controlName].validation\r\n        ),\r\n        touched: true\r\n      })\r\n    });\r\n    setAuthForm(updatedControls);\r\n  };\r\n\r\n  const submitHandler = event => {\r\n    event.preventDefault();\r\n    props.onAuth(authForm.email.value, authForm.password.value, isSignup);\r\n  };\r\n\r\n  const switchAuthModeHandler = () => {\r\n    setIsSignup(!isSignup);\r\n  };\r\n\r\n  const formElementsArray = [];\r\n  for (let key in authForm) {\r\n    formElementsArray.push({\r\n      id: key,\r\n      config: authForm[key]\r\n    });\r\n  }\r\n\r\n  let form = formElementsArray.map(formElement => (\r\n    <Input\r\n      key={formElement.id}\r\n      elementType={formElement.config.elementType}\r\n      elementConfig={formElement.config.elementConfig}\r\n      value={formElement.config.value}\r\n      invalid={!formElement.config.valid}\r\n      shouldValidate={formElement.config.validation}\r\n      touched={formElement.config.touched}\r\n      changed={event => inputChangedHandler(event, formElement.id)}\r\n    />\r\n  ));\r\n\r\n  if (props.loading) {\r\n    form = <Spinner />;\r\n  }\r\n\r\n  let errorMessage = null;\r\n\r\n  if (props.error) {\r\n    errorMessage = <p>{props.error.message}</p>;\r\n  }\r\n\r\n  let authRedirect = null;\r\n  if (props.isAuthenticated) {\r\n    authRedirect = <Redirect to={props.authRedirectPath} />;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Auth}>\r\n      {authRedirect}\r\n      {errorMessage}\r\n      <form onSubmit={submitHandler}>\r\n        {form}\r\n        <Button btnType=\"Success\">SUBMIT</Button>\r\n      </form>\r\n      <Button clicked={switchAuthModeHandler} btnType=\"Danger\">\r\n        SWITCH TO {isSignup ? 'SIGNIN' : 'SIGNUP'}\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token !== null,\r\n    buildingBurger: state.burgerBuilder.building,\r\n    authRedirectPath: state.auth.authRedirectPath\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAuth: (email, password, isSignup) =>\r\n      dispatch(actions.auth(email, password, isSignup)),\r\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n  };\r\n};\r\n\r\nexport default connect( mapStateToProps, mapDispatchToProps )(Auth);\r\n"],"sourceRoot":""}